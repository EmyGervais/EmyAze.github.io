---
layout: post
title: "ðŸŽ®ByteCraft: Generating video games and animations through bytes"
---

[Paper](https://raw.githubusercontent.com/SamsungSAILMontreal/ByteCraft/paper/ByteCraft.pdf) \| [Model](https://huggingface.co/SamsungSAILMontreal/ByteCraft) \| [Code](https://github.com/SamsungSAILMontreal/ByteCraft)

<figure>
  <img src="{{ site.baseurl }}/assets/images/screenshots.png" alt="Screenshots of files generated by ByteCraft" style="width: 100%;">
  <figcaption>Screenshots of files generated by ByteCraft</figcaption>
</figure>

Contents: [ByteCraft](#bytecraft) \| [Examples](#examples-of-files-generated-by-bytecraft) \| [The future](#the-future)

## ByteCraft

Imagine a world where you can write a prompt describing a video game or animation that you want, and a fully fledged executable file comes out. We take the first attempt at this crazy goal by training a model to generate the bytes of video games and animations!

<figure>
  <img src="{{ site.baseurl }}/assets/images/bytes_file.png" alt="The first 256 bytes of a 15Kb game" style="width: 100%;">
  <figcaption>The first 128 bytes of a 15Kb game</figcaption>
</figure>

Our model, ðŸŽ®ByteCraft, was made by fine-tuning a 7B parameter LLM (Qwen2.5) at 32K generation context length on 4 GPUs for 4 months to generate thr bytes of video games and animations conditional on a text description of the desired file. The file can then be saved and read on your computer!

Working in the byte world is extremely challenging because a single wrong byte can break the whole functioning of the file. Still, ByteCraft can generate some semi-functional and fully working files. The model is imperfect, but the fact that it can generate diverse readable files shows that the model has some understanding of bytes.

A file of 32Kb represents 32K tokens at the byte level. To alleviate this problem, we use Byte-Pair-Encoding (BPE) to encode bytes into tokens containing, on average, 2.29 bytes and, at most, 4-5 bytes, allowing us to generate files as big as 140Kb with 32K tokens.

## Examples of files generated by ByteCraft

There are 2 examples per section, click on them to start the file. 

# Moving checkered patterns

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/checker1.swf"  style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/checker1.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/checker2.swf"  style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/checker2.swf">
</object>
{% comment %}
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/checker3.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/checker3.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/checker4.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/checker4.swf">
</object>
{% endcomment %}

# Working memorizations

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/working1.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/working1.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/working2.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/working2.swf">
</object>

# Weird broken animations

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/weird1.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/weird1.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/weird2.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/weird2.swf">
</object>


# Infinite loading

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/loading1.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/loading1.swf">
</object>
{% comment %}
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/loading2.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/loading2.swf">
</object>
{% endcomment %}
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/loading3.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/loading3.swf">
</object>

# Characters

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/semi7.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/semi7.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/semi12.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/semi12.swf">
</object>
<br />

# Sounds
[(Click here)]({{ site.baseurl }}{% link sounds.markdown %})
<br />

# Others

<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/text1.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/text1.swf">
</object>
<object type="application/x-shockwave-flash" data="{{ site.baseurl }}/assets/swf/semi14.swf" style="width: 100%;">
  <param name="movie" value="{{ site.baseurl }}/assets/swf/semi14.swf">
</object>
<br />

## The future

A parallel exists between ByteCraft and autoregressive molecule generation. Molecules can be represented as [SMILES](https://en.wikipedia.org/wiki/Simplified_Molecular_Input_Line_Entry_System) strings and their context length is generally small (10-250 tokens without BPE). We show below some of the progress of molecule generation over time on the [Zinc-250K](https://www.kaggle.com/datasets/basu369victor/zinc250k) dataset:
* (2016) [GVAE](https://arxiv.org/abs/1610.02415v1): 0.7% valid molecules (<- ByteCraft is here)
* (2017) [CVAE](https://arxiv.org/abs/1703.01925): 7.2% valid molecules
* (2018) [RVAE](https://arxiv.org/abs/1809.02630): 34.9% valid molecules
* (2021) [GFVAE](https://dl.acm.org/doi/10.1145/3459637.3482260), [STGG](https://openreview.net/forum?id=w60btE_8T2m), and many others: 100% valid  molecules, but not always synthesizable
* (2025) [STGG+AL](https://arxiv.org/abs/2502.14842): 100% valid molecules with high synthesizability and strong out-of-distribution properties  (<- the future ByteCraftv3 is here)

ByteCraft is at the equivalent of GVAE for molecule generation in 2016 but on the much harder problem of generating games and animations at 32K context length. Considering the recent exponential progress in AI, we expect to rapidly move toward the goal of 100% valid generated novel files at high context length. 

Keep in mind that this was trained on extremely limited hardware (4 GPUs for 4 months). Our method scales with compute. The ceiling is far from being reached; we are at the very first stage of a new paradigm. 

We hope this crazy project inspires researchers and hobbyists toward the lofty goal of generating games through bytes.
